#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

# Chapter 1 - Where in the Genome Does DNA Replication Begin?

#!markdown

## Lesson 1.2 - Hidden messages in the replication origin

#!markdown

### Counting Words

#!fsharp

/// Count the # of times that a k-mer (a string of length k) appears in a string of nucleotides.
let count (nucleotides: string) (kmer: string) =
    nucleotides.ToCharArray()
    |> Array.windowed kmer.Length
    |> Array.filter (fun window ->
        window = kmer.ToCharArray()
    )
    |> Array.length

// count "ACAACTATGCATACTATCGGGAACTATCCT" "ACTAT"
count "CGATATATCCATAG" "ATA"

#!markdown

The `count` function makes use of the `Array.windowed` library function, which takes a sequence of elements and creates smaller sub-sequences (or "windows") of a specified size.

#!fsharp

Array.windowed 3 [|1 .. 5|]

#!markdown

### Frequent Words

#!fsharp

/// Find the most frequent k-length pattern in the `nucleotides` string
let frequentWords (nucleotides: string) (k: uint) =
    // separate nucleotides into kmer substrings of size k
    let (kmers: string array) =
        nucleotides.ToCharArray()
        |> Array.map string
        |> Array.windowed (int k)
        |> Array.map (String.concat "")

    // create a map where keys are kmers of length 'k' & the values are the # of times those kmers are found in the 'nucleotides' string
    let kmerFrequencies: Map<string, uint> =
        kmers
        |> Array.fold (fun (freq: Map<string, uint>) kmer ->
            // if the kmer already exists, bump the count by 1; if it doesn't, start the count at 1
            freq.Change (kmer, (function
            | Some count -> Some (count + 1u)
            | None -> Some 1u
        ))
        ) Map.empty

    // find the most frequent kmer by iterating through pairs of kmers & their counts. keep the kmer that higher count.
    kmerFrequencies
    |> Map.toArray
    |> Array.reduce (fun (kmer1, count1) (kmer2, count2) ->
        if count1 >= count2 then
            (kmer1, count1)
        else (kmer2, count2)
    )


frequentWords "ACAACTATGCATACTATCGGGAACTATCCT" 5u
